# generated by appcreator
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.urls import reverse, reverse_lazy
from django.views.generic.detail import DetailView
from django.views.generic.edit import DeleteView
from . filters import *
from . forms import *
from . tables import *
from . models import (
    NerDataSet,
    NerSample,
)
from browsing.browsing_utils import (
    GenericListView, BaseCreateView, BaseUpdateView, BaseDetailView
)


class NerDataSetListView(GenericListView):

    model = NerDataSet
    filter_class = NerDataSetListFilter
    formhelper_class = NerDataSetFilterFormHelper
    table_class = NerDataSetTable
    init_columns = [
        'id', 'ner_name'
    ]
    enable_merge = False


class NerDataSetDetailView(BaseDetailView):

    model = NerDataSet
    template_name = 'myprodigy/generic_detail.html'


class NerDataSetCreate(BaseCreateView):

    model = NerDataSet
    form_class = NerDataSetForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NerDataSetCreate, self).dispatch(*args, **kwargs)


class NerDataSetUpdate(BaseUpdateView):

    model = NerDataSet
    form_class = NerDataSetForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NerDataSetUpdate, self).dispatch(*args, **kwargs)


class NerDataSetDelete(DeleteView):
    model = NerDataSet
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('myprodigy:nerdataset_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NerDataSetDelete, self).dispatch(*args, **kwargs)


class NerSampleListView(GenericListView):

    model = NerSample
    filter_class = NerSampleListFilter
    formhelper_class = NerSampleFilterFormHelper
    table_class = NerSampleTable
    init_columns = [
        'id', 'text',
    ]
    enable_merge = False


class NerSampleDetailView(BaseDetailView):

    model = NerSample
    template_name = 'myprodigy/nersample_detail.html'


class NerSampleCreate(BaseCreateView):

    model = NerSample
    form_class = NerSampleForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NerSampleCreate, self).dispatch(*args, **kwargs)


class NerSampleUpdate(BaseUpdateView):

    model = NerSample
    form_class = NerSampleForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NerSampleUpdate, self).dispatch(*args, **kwargs)


class NerSampleDelete(DeleteView):
    model = NerSample
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('myprodigy:nersample_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(NerSampleDelete, self).dispatch(*args, **kwargs)
